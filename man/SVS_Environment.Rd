% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rSVS.R
\name{SVS_Environment}
\alias{SVS_Environment}
\title{Check SVS environment and return path to components}
\usage{
SVS_Environment(component = "all", verbose = FALSE, debug = FALSE)
}
\arguments{
\item{component}{which part of the enviroment to check, default all}

\item{verbose}{echo status messages as environment is being examined}

\item{debug}{toggle to turn on extra output while function is running}
}
\value{
path of primary executable for the individual component returned and messages printed on console
}
\description{
SVS_Enviroment() checks the package enviroment and alternatively will install a python distribution
}
\details{
Possible package components to investigate include:
\itemize{
  \item All
  \item SVS
  \item Python
  \item BMP2PNG
  \item Zip
  \item Defaults
}

When testing for one component, the path to the relavant executable will be returned. When testing
for All paths, a path to each component will be provided as a list.

When testing for Python the function will first test to see if a copy of Python is available on
the system PATH. If there is no a system wide copy of Python available the function will check for a
package internal copy. The first time SVS_Environment('Python') is run, the user will be
prompted to allow the installation (unzipping) of the required python files (the package includes a zipped copy of
Python 3.8 that can be installed into the package). Subsequent calls to SVS_Enviroment('Python')
will located "python.exe" in the package and return the path.
}
\examples{
SVS_Environment( 'python' )  # investigate Python environment for running backend code
SVS_Environment( 'svs' )     # make sure all SVS components are available to run program
}
\author{
Jim McCarter \email{jim.mccarter@rayonier.com}
}
